# Author: Salo Shp <saloshp@gmail.com>
#
#    This file is part of Munio. <https://github.com/salosh/munio.git>
#
#    Munio is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Munio is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Munio.  If not, see <http://www.gnu.org/licenses/>.
#

---
- name: "Configure variables based on args"
  set_fact:
    wts_key: "{{ intermediate_dir }}/private/{% if prefix is defined %}{{ prefix }}_{% endif %}{{ what_to_sign }}.key"
    wts_csr: "{{ intermediate_dir }}/csr/{% if prefix is defined %}{{ prefix }}_{% endif %}{{ what_to_sign }}.csr"
    wts_crt: "{{ intermediate_dir }}/certs/{% if prefix is defined %}{{ prefix }}_{% endif %}{{ what_to_sign }}.crt"
    extension : "{{ extension | default('server_cert') }}"

- name: "Sign :: Generate private key for '{{ what_to_sign }}'"
  shell:
    openssl genrsa -out {{ wts_key }} 2048
  register: sign_create_private_key
  args:
    creates: "{{ wts_key }}"
  tags:
  - conf

- name: "Sign :: Generate CSR for '{{ what_to_sign }}'"
  environment:
    SAN: ""
  shell:
    openssl req -config {{ intermediate_dir }}/openssl.cnf -key {{ wts_key }} -new -sha256 -out {{ wts_csr }} -subj "/OU=Munio {{ what_to_sign | capitalize }}/CN={{ subject | default(what_to_sign) }}/emailAddress={{ what_to_sign }}@{{ domain_name }}"
  register: sign_create_csr
  args:
    creates: "{{ wts_csr }}"
  tags:
  - conf

- name: "Sign :: Generate certificate for '{{ what_to_sign }}'"
  environment:
    SAN: |
      {% set san = [] %}
      {% if extension == 'client_cert' %}
      {%   set tmp = san.append('DNS:' ~ what_to_sign) %}
      {%   set tmp = san.append('DNS:' ~ what_to_sign ~'.'~ domain_name) %}
      {%   if what_to_sign in groups['all'] %}
      {%     set tmp = san.append('IP:' ~ ips[hostvars[what_to_sign].cnc_net][what_to_sign].ip ) %}
      {%   endif %}
      {% elif extension in ['server_cert', 'combined_cert'] %}
      {%   set tmp = san.append('DNS:' ~ what_to_sign ~'.'~ domain_name) %}
      {%   set tmp = san.append('DNS:' ~ what_to_sign ~'.service.todero.local') %}
      {%   for node in groups['ha-nodes'] %}
      {%     set tmp = san.append('DNS:' ~ node ~'.'~ domain_name) %}
      {%   endfor %}
      {% endif %}
      {{ (san | join(',')) }}
  shell:
    openssl ca -batch -config {{ intermediate_dir }}/openssl.cnf -extensions {{ extension }} -extensions san_env -days 366 -notext -md sha256 -in {{ wts_csr }} -passin file:/root/.ssh/id_rsa -out {{ wts_crt }}
  register: sign_create_certificate
  args:
    creates: "{{ wts_crt }}"
  tags:
  - conf

- name: "Sign :: Verify '{{ what_to_sign }}' certificate"
  shell: "{{ item }}"
  loop:
  - "openssl x509 -in {{ wts_crt }} -text -noout"
  register: item_output
  loop_control:
    label: "{{ item }} =>\n{{ item_output.stdout_lines | join('\n') }}"
  tags:
  - verify
  - debug
