# Author: Salo Shp <saloshp@gmail.com>
#
#    This file is part of Munio. <https://github.com/salosh/munio.git>
#
#    Munio is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Munio is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Munio.  If not, see <http://www.gnu.org/licenses/>.
#

---
- name: "Install packages"
  vars:
    packages: "{{ conf.packages }}"
  include_tasks: "{{ role_path }}/../common/tasks/{{ ansible_pkg_mgr }}/package.yml"
  tags:
  - bin

- name: "Delete directories"
  file:
    dest:  "{{ item }}"
    state: absent
  with_items:
  - "{{ conf.root_dir }}"
  tags:
  - clear

- name: "Create Root CA directories"
  file:
    path:  "{{ item }}"
    state: "directory"
    owner: "{{ conf.username }}"
    group: "{{ conf.groupname }}"
  with_items:
  - "{{ conf.root_dir }}"
  - "{{ conf.root_dir }}/certs"
  - "{{ conf.root_dir }}/newcerts"
  - "{{ conf.root_dir }}/private"
  tags:
  - conf

- name: "Deploy Root CA configuration"
  vars:
    ca_type: "root"
  template:
    src:   "{{ ansible_pkg_mgr }}/openssl.cnf.j2"
    dest:  "{{ conf.root_dir }}/openssl.cnf"
    owner: "{{ conf.username }}"
    group: "{{ conf.groupname }}"
    mode:  "u=rw,g=r,o=r"
    force: yes
  tags:
  - conf

- name: "Deploy initial indexes"
  copy:
    content: "{{ item.content }}"
    dest:    "{{ item.dest }}"
  with_items:
  - dest:    "{{ conf.root_dir }}/index.txt"
    content: ""
  - dest:    "{{ conf.root_dir }}/serial"
    content: "5410"
  - dest:    "{{ conf.root_dir }}/crlnumber"
    content: "5410"
  tags:
  - conf

- name: "Generate Root CA creds"
  shell:
    "{{ item }}"
  with_items:
  - "openssl genrsa -aes256 -passout file:/root/.ssh/id_rsa -out {{ conf.root_dir }}/private/ca.key 2048"
  - openssl rsa -in {{ conf.root_dir }}/private/ca.key -passin file:/root/.ssh/id_rsa -pubout > {{ conf.root_dir }}/private/ca.pub
  - "chmod 400 {{ conf.root_dir }}/private/ca.key"
  - openssl req -config {{ conf.root_dir }}/openssl.cnf -key {{ conf.root_dir }}/private/ca.key -passin file:/root/.ssh/id_rsa -new -x509 -days 3650 -sha256 -extensions v3_ca -out {{ conf.root_dir }}/certs/ca.crt -subj "/OU=Munio Certificate Authority/CN=Munio Root CA"
#-subj "/C= /ST= /L= /O= /OU='Munio Certificate Authority' /CN='Munio Root CA' /emailAddress=''
  - "chmod 444 {{ conf.root_dir }}/certs/ca.crt"
  - "openssl x509 -noout -text -in {{ conf.root_dir }}/certs/ca.crt"
  register: rootca_creds
  tags:
  - conf

- name: "Debug Root CA creds creation process"
  debug:
    var: rootca_creds.results[-1].stdout_lines

- name: "Create Intermediate CAs"
  vars:
    intermediate_dir: "{{ conf.root_dir }}/{{ intermediate_ca_name }}"
    encrypt_creds: true
  include_tasks: "./intermediate.yml"
  with_items:
  - intermediate
  loop_control:
    loop_var: "intermediate_ca_name"

# Debug
# openssl crl -in {{ intermediate_dir }}/crl/ca.crl -noout -text

- name: "Generate Munio cluster service certificates"
  vars:
    intermediate_dir: "{{ conf.root_dir }}/intermediate"
    prefix: "svc"
  include_tasks: "./sign.yml"
  with_items:
  - "{{ lb_services.keys() | list | sort | unique }}"
  loop_control:
    loop_var: "what_to_sign"
    label: "Creating certificates for '{{ what_to_sign }}'"

- name: "Generate Munio cluster node certificates"
  vars:
    intermediate_dir: "{{ conf.root_dir }}/intermediate"
    prefix: "node"
    what_to_sign: "{{ item }}"
    extension:    "client_cert"
    subject:      "{{ item }}.node.todero.local"
  include_tasks: "sign.yml"
  with_items:
  - "{{ groups['all'] }}"
  delegate_to: "{{ ansible_play_hosts[0] }}"
  run_once: true
  tags:
  - init

- name: "Generate Consul service certificates"
  vars:
    intermediate_dir: "{{ conf.root_dir }}/intermediate"
    what_to_sign: "consul"
    extension:    "combined_cert"
    subject:      "*.{{ domain_name }}"
  include_tasks: "./sign.yml"

# TODO FIXME add cert to OS
# https://bbs.archlinux.org/viewtopic.php?id=166493
#sudo cp path/to/goagent/local/CA.crt /usr/local/share/ca-certificates/goagent.crt
#sudo update-ca-certificates
