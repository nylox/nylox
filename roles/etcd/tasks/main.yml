# Author: Salo Shp <saloshp@gmail.com>
#
#    This file is part of Munio. <https://github.com/salosh/munio.git>
#
#    Munio is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Munio is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Munio.  If not, see <http://www.gnu.org/licenses/>.
#

---
- name: "Download requirements"
  include_tasks: "{{ role_path }}/../common/tasks/requirements.yml"
  when:
  - "connectivity_mode == 'online'"
  tags:
  - reqs

- name: "Create OS groups"
  group:
    name:   "{{ conf.groupname }}"
    system: "yes"
    state:  "present"
  tags:
  - init

- name: "Create OS users"
  user:
    name:      "{{ conf.username }}"
    group:     "{{ conf.groupname }}"
    append:    "yes"
    shell:     "/bin/false"
    home:      "/var/lib/{{ conf.username }}"
    move_home: "yes"
    system:    "yes"
    state:     "present"
  tags:
  - init

- name: "Extract binary '{{ requirements.binary.name }}'"
  unarchive:
    src:  "{{ requirements.binary.local_path }}"
    dest: "/usr/share"
    owner: "{{ conf.username }}"
    group: "{{ conf.username }}"
    mode: "u=rwx,g=rx,o=rx"
  tags:
  - bin

- name: "Create working directory link"
  file:
    src: "{{ conf.work_dir }}-v{{ etcd_version }}-linux-amd64"
    dest: "{{ conf.work_dir }}"
    state: link
    owner: "{{ conf.username }}"
    group: "{{ conf.username }}"
    mode:  "u=rwx,g=rx,o=rx"
    force: yes

- name: "Create binary links"
  file:
    src: "{{ conf.work_dir }}-v{{ etcd_version }}-linux-amd64/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
    owner: "{{ conf.username }}"
    group: "{{ conf.username }}"
    mode:  "u=rwx,g=rx,o=rx"
    force: yes
  with_items:
  - "etcd"
  - "etcdctl"

- name: "Deploy service file"
  template:
    src:   etcd_systemd.j2
    dest:  /etc/systemd/system/etcd.service
    owner: root
    group: root
    mode:  "u=rw,g=r,o=r"
  tags:
  - service

- name: "Stop service"
  service:
    name:    "{{ item }}"
    state:   stopped
    enabled: no
  with_items:
  - "{{ conf.services }}"
  tags:
  - service

- name: "Delete configuration directories"
  file:
    dest:  "{{ item }}"
    state: absent
    force: yes
  with_items:
  - "{{ conf.conf_dir }}"
#  - "{{ conf.root_dir }}-wal"
  - "{{ conf.root_dir }}/member"
  - "{{ conf.root_dir }}"
  tags:
  - clear

- name: "Create configuration directories"
  file:
    path:  "{{ item }}"
    state: "directory"
    owner: "{{ conf.username }}"
    group: "{{ conf.groupname }}"
  with_items:
  - "{{ conf.conf_dir }}"
  - "{{ conf.root_dir }}"
 # - "{{ conf.root_dir }}-wal"
  tags:
  - conf

- name: "Deploy configuration"
  template:
    src:   "{{ conf.conf_file }}.j2"
    dest:  "{{ conf.conf_dir }}/{{ conf.conf_file }}"
    owner: "{{ conf.username }}"
    group: "{{ conf.groupname }}"
    mode:  "u=rw,g=r,o=r"
    force: yes
  tags:
  - conf

- name: "Create intermediate CA"
  vars:
    intermediate_ca_name: "etcd"
    intermediate_dir: "/var/lib/ca/etcd"
    encrypt_creds: false
  include_tasks: "{{ role_path }}/../rootca/tasks/intermediate.yml"
  delegate_to: "{{ groups['rootca-nodes'][0] }}"
  run_once: true
  tags:
  - init

- name: "Generate Etcd TLS certificates"
  vars:
    what_to_sign: "{{ item }}"
    extension:    "combined_cert"
    subject:      "*.{{ domain_name }}"
    intermediate_dir: "/var/lib/ca/etcd"
  include_tasks: "{{ role_path }}/../rootca/tasks/sign.yml"
  with_items:
  - "etcd"
  - "etcd-peer"
  delegate_to: "{{ groups['rootca-nodes'][0] }}"
  run_once: true
  tags:
  - init

- name: "Slurp service certificates"
  slurp:
    src: "{{ item }}"
  delegate_to: "{{ groups['rootca-nodes'][0] }}"
  loop:
  - /var/lib/ca/etcd/certs/ca-chain.crt
  - /var/lib/ca/etcd/certs/ca.crt
  - /var/lib/ca/etcd/private/ca.pub
  - /var/lib/ca/etcd/certs/etcd.crt
  - /var/lib/ca/etcd/private/etcd.key
  - /var/lib/ca/etcd/certs/etcd-peer.crt
  - /var/lib/ca/etcd/private/etcd-peer.key
  register: service_certificates

- name: "Distribute service certificates to all nodes"
  copy:
    content: "{{ item['content'] | b64decode }}"
    dest:    "{{ conf.conf_dir }}/{{ item.source.split('/')[-1] }}"
    owner:   "{{ conf.username }}"
    group:   "{{ conf.groupname }}"
    mode:    "u=r,g=r,o="
    force:   yes
  loop: "{{ service_certificates['results'] }}"
  loop_control:
    label: "{{ item.source.split('/')[-1] }}"
  tags:
  - init

- name: "Final state for service - {{ service_final.state }}"
  service:
    name:    "{{ item }}"
    state:   "{{ service_final.state }}"
    enabled: "{{ service_final.enabled }}"
  loop: "{{ conf.services }}"
  tags:
  - service

- name: "Wait for ports - server ports"
  wait_for:
    host:    "{{ item.host }}"
    port:    "{{ item.port }}"
    state:   started
    timeout: 5
  with_items:
  - host: "{{ bind_host }}"
    port: "2379"
  - host: "{{ bind_host }}"
    port: "2380"
  loop_control:
    label: "{{ item.host }}:{{ item.port }}"
  when:
  - "service_final.state != 'stopped'"
  tags:
  - service
  - verify

# The correct way to make secured requests to the endpoint
# ETCDCTL_API=3 etcdctl --cacert="/etc/etcd/ca.crt" --cert="/etc/etcd/etcd.crt" --key="/etc/etcd/etcd.key" --endpoints="https://ha01.sdev.munio.local:2379" member list
