# Author: Salo Shp <saloshp@gmail.com>
#
#    This file is part of Nylox. <https://github.com/nylox/nylox.git>
#
#    Nylox is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Nylox is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Nylox.  If not, see <http://www.gnu.org/licenses/>.
#

---
- name: "Install prerequisites packages"
  vars:
    packages: "{{ conf.pre_packages }}"
  include_tasks: "{{ role_path }}/../common/tasks/{{ ansible_pkg_mgr }}/package.yml"
  tags:
  - bin

- name: "Install packages"
  vars:
    packages: "{{ conf.packages }}"
  include_tasks: "{{ role_path }}/../common/tasks/{{ ansible_pkg_mgr }}/package.yml"
  tags:
  - bin

- name: "Stop service"
  service:
    name:    "{{ item }}"
    state:   stopped
    enabled: no
  with_items:
  - "{{ conf.services }}"
  tags:
  - service
  - clear

- name: "Clear bricks configuration"
  include_tasks: "./clear.yml"
  when:
  - purge_previous_configuration is defined

- name: "Create shared directory"
  file:
    dest:  "{{ item }}"
    state: directory
    owner: "{{ conf.username }}"
    group: "{{ conf.groupname }}"
    mode:  "u=rwx,g=rx,o=rx"
  with_items:
  - "{{ shared_volume.path }}"
  tags:
  - init
  - conf

#- name: "Deploy '{{ ansible_pkg_mgr }}' based configuration"
#  include_tasks: "./conf_{{ ansible_pkg_mgr }}.yml"

- name: "Deploy bricks configuration"
  include_tasks: "./bricks.yml"

- name: "Final state for service - {{ service_final.state }}"
  service:
    name:    "{{ item }}"
    state:   "{{ service_final.state }}"
    enabled: "{{ service_final.enabled }}"
  with_items:
  - "{{ conf.services }}"
  tags:
  - service

- name: "Wait for ports"
  wait_for:
    host:    "{{ item.host }}"
    port:    "{{ item.port }}"
    state:   started
    timeout: 5
  with_items:
  - host: "{{ bind_host }}"
    port: "{{ bind_port }}"
  loop_control:
    label: "{{ item.host }}:{{ item.port }}"
  when:
  - "service_final.state != 'stopped'"
  tags:
  - service
  - verify

- name: "Probe peers"
  shell:
    "gluster peer probe {{ item }}.{{ domain_name }}"
  with_items:
  - "{{ groups['glusterfs-nodes'] | sort }}"
  run_once: true
  tags:
  - init

- name: "Gather probed peers status"
  shell:
    "gluster peer status"
  register: glusterfs_peer_status
  tags:
  - init
  - debug

- name: "View gathered probed peers status"
  debug:
    var: glusterfs_peer_status
  tags:
  - init
  - debug

- name: "Create GlusterFS shared volume"
  vars:
    brick_paths: |
      {% set path_list = [] -%}
      {% for brick in (bricks | map(attribute='name') | list | unique | sort) %}
      {%   set tmp = path_list.append(conf.root_dir ~'/'~ brick ~'/gv0') -%}
      {% endfor %}
      {{- (path_list) -}}
  gluster_volume:
    state:     present
    name:      "{{ shared_volume.name }}"
    bricks:    "{{ brick_paths | join(',') }}"
    rebalance: yes
    cluster:   "{{ groups['glusterfs-nodes'] | sort }}"
    replicas:  "{{ groups['glusterfs-nodes'] | length }}"
  run_once: true
  delegate_to: "{{ ansible_play_hosts[0] }}"
  tags:
  - init

- name: "Start GlusterFS shared volume"
  gluster_volume:
    state: started
    name:  "{{ shared_volume.name }}"
  tags:
  - init

- name: "Mount GlusterFS shared volume"
  mount:
    path:   "{{ shared_volume.path  }}"
    src:    "{{ inventory_hostname }}:/{{ shared_volume.name }}"
    fstype: glusterfs
    state:  mounted
  tags:
  - init
  - conf
